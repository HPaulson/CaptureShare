{"remainingRequest":"/media/hpaulson/HDD/Development/temp-name/client/node_modules/thread-loader/dist/cjs.js!/media/hpaulson/HDD/Development/temp-name/client/node_modules/babel-loader/lib/index.js!/media/hpaulson/HDD/Development/temp-name/client/node_modules/ts-loader/index.js??ref--14-3!/media/hpaulson/HDD/Development/temp-name/client/node_modules/eslint-loader/index.js??ref--13-0!/media/hpaulson/HDD/Development/temp-name/client/src/services/uploadService.ts","dependencies":[{"path":"/media/hpaulson/HDD/Development/temp-name/client/src/services/uploadService.ts","mtime":1591417778949},{"path":"/media/hpaulson/HDD/Development/temp-name/client/node_modules/cache-loader/dist/cjs.js","mtime":1589683287335},{"path":"/media/hpaulson/HDD/Development/temp-name/client/node_modules/thread-loader/dist/cjs.js","mtime":1589683287341},{"path":"/media/hpaulson/HDD/Development/temp-name/client/node_modules/babel-loader/lib/index.js","mtime":1589683287342},{"path":"/media/hpaulson/HDD/Development/temp-name/client/node_modules/ts-loader/index.js","mtime":1589683653585},{"path":"/media/hpaulson/HDD/Development/temp-name/client/node_modules/eslint-loader/index.js","mtime":1589683292865}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/media/hpaulson/HDD/Development/temp-name/client/node_modules/eslint-loader/index.js??ref--13-0!/media/hpaulson/HDD/Development/temp-name/client/src/services/uploadService.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAP,MAAmB,0BAAnB;AAEA,IAAM,QAAQ,aAAM,MAAM,CAAC,MAAP,CAAc,IAApB,MAAd;;IAEM,a;;;;;;;;8FACgB,Q,EAAe,I;;;;;;AAEjC,gBAAA,MAAM,CAAC,KAAP,CAAa,OAAb,CAAqB,UAAC,KAAD,EAAU;AAC7B,sBAAI,KAAK,CAAC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,oBAAA,QAAQ,GAAG,KAAK,CAAC,QAAjB;AACC;AACR,iBAJG;AAKE,gBAAA,I,GAAO;AACX,kBAAA,OAAO,EAAE;AACP,oBAAA,aAAa,EAAE,QADR;AAEP,oBAAA,MAAM,EAAE;AAFD;AADE,iB;kDAMF,KAAK,CAAC,IAAN,CAAW,QAAQ,GAAG,YAAtB,EAAoC,QAApC,EAA8C,IAA9C,EAAoD,IAApD;AAAA,qFAAyD,iBAAM,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACxD,4BAAA,aADwD,GACnC,EADmC;AAAA;AAAA,mCAExD,CAAC,CAAC,IAAF,CAAO,IAAP,CAAY,OAAZ,CAAoB,UAAC,KAAD,EAAe;AACvC,8BAAA,aAAa,CAAC,IAAd,CAAmB;AACjB,gCAAA,GAAG,YAAK,MAAM,CAAC,MAAP,CAAc,IAAnB,cAA2B,KAAK,CAAC,IAAN,CAAW,GAAtC;AADc,+BAAnB;AAGD,6BAJK,CAFwD;;AAAA;AAAA,6DAOvD,aAPuD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAzD;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;;;;;;;;;;;;;8FAWW,E,EAAY,I;;;;;;AAE9B,gBAAA,MAAM,CAAC,KAAP,CAAa,OAAb,CAAqB,UAAC,KAAD,EAAU;AAC7B,sBAAI,KAAK,CAAC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,oBAAA,QAAQ,GAAG,KAAK,CAAC,QAAjB;AACC;AACR,iBAJG;AAKE,gBAAA,I,GAAO;AACX,kBAAA,OAAO,EAAE;AACP,oBAAA,aAAa,EAAE,QADR;AAEP,oBAAA,MAAM,EAAE;AAFD;AADE,iB;;uBAMH,KAAK,CAAC,MAAN,CAAa,QAAQ,GAAG,aAAX,GAA2B,EAAxC,EAA4C,IAA5C,C;;;;;;;;;;;;;;;;;;;gGAGc,I;;;;;;AAEpB,gBAAA,MAAM,CAAC,KAAP,CAAa,OAAb,CAAqB,UAAC,KAAD,EAAU;AAC7B,sBAAI,KAAK,CAAC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,oBAAA,QAAQ,GAAG,KAAK,CAAC,QAAjB;AACC;AACR,iBAJG;AAKM,gBAAA,I,GAAO;AACX,kBAAA,OAAO,EAAE;AACP,oBAAA,aAAa,EAAE,QADR;AAEP,oBAAA,MAAM,EAAE;AAFD;AADE,iB;kDAMN,KAAK,CAAC,GAAN,CAAU,QAAQ,GAAG,aAArB,EAAoC,IAApC,EAA0C,IAA1C;AAAA,sFAA+C,kBAAM,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA,8DAC7C,CAAC,CAAC,IAAF,CAAO,IADsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/C;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;;;;;;;;;;;;;;;AAMX,eAAe,aAAf","sourcesContent":["import axios from \"axios\";\nimport config from \"../../../app/config.json\";\n\nconst BASE_URL = `${config.server.host}/`;\n\nclass UploadService {\n  static async upload(formData: any, user: any) {\n    let userPass;\n    config.users.forEach((users) => {\n      if (users.username === user) {\n        userPass = users.password\n        }\n})\nconst conf = {\n  headers: {\n    Authorization: userPass,\n    client: true\n  }\n}\n    return axios.post(BASE_URL + \"api/upload\", formData, conf).then(async x => {\n      const uploadedFiles: any = [];\n      await x.data.data.forEach((index: any) => {\n        uploadedFiles.push({\n          url: `${config.server.host}/${index.data._id}`\n        });\n      });\n      return uploadedFiles;\n    });\n  }\n\n  static async remove(id: string, user: string) {\n    let userPass;\n    config.users.forEach((users) => {\n      if (users.username === user) {\n        userPass = users.password\n        }\n})\nconst conf = {\n  headers: {\n    Authorization: userPass,\n    client: true\n  }\n}\n    await axios.delete(BASE_URL + \"api/upload/\" + id, conf);\n  }\n\n  static async getFiles(user: string) {\n    let userPass;\n    config.users.forEach((users) => {\n      if (users.username === user) {\n        userPass = users.password\n        }\n})\n    const conf = {\n      headers: {\n        Authorization: userPass,\n        client: true\n      }\n    }\n    return axios.get(BASE_URL + \"api/upload/\", conf).then(async x => {\n      return x.data.data;\n    });\n  }\n}\n\nexport default UploadService;\n"],"sourceRoot":""}]}