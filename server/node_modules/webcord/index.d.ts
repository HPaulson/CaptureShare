/** Declaration file generated by dts-gen */

export = webcord;

interface Options {
    url: string,
    name?: string,
    avatar?: string,
    tts?: boolean,
    mentions?: boolean
}

interface Footer {
    text: string,
    icon?: string
}

interface Author {
    name: string,
    icon?: string,
    url?: string
}

declare class webcord {

    /**
	 * @param {object} options - Webcord options
	 * ```js
	 * import webcord from "webcord"
	 * new webcord({
	 *      url: "https://discordapp.com/api/webhooks/817645388345186120/7FT_nELazMwK3iY7X8yXdjIsmdoS07rXIONszaT2qnv3lJgRIkqGGLfCnzihej",
	 *      name: "Webcord",
	 *      avatar: "https://upload.wikimedia.org/wikipedia/commons/6/6a/JavaScript-logo.png"
	 * })
	 * ```
	 * @param {string} options.url - Discord webhook link
	 * @param {?string} [options.name] - Webhook display name
	 * @param {?string} [options.avatar] - Webhook avatar image
	 * @param {boolean} [options.tts] - Should webhook use tts
	 * @param {boolean} [options.mentions] - Can the webhook mention users/bots
	 */
    constructor(options: Options);

    /**
	 * @description Increments to the next embed.
	 * @returns {Webcord} this
	 */
    inc(): this;

	/**
	 * @description Decrement to the previous embed.
	 * @returns {Webcord} this
	 */
    dec(): this;

	/**
	 * @description Adds a field to the embed (max 25).
	 * @param {string} name The name of this field
	 * @param {string} value The value of this field
	 * @param {boolean} [inline=false] If this field will be displayed inline
	 * @returns {Webcord} this
	 */
    addField(name: string, value: string, inline?: boolean): this;

	/**
	 * @description Adds one or more fields to the embed (max 25).
	 * @param {...object} fields Field object
	 * ```js
	 * .addFields({
	 * 		name: "Title",
	 * 		value: "Some text",
	 * 		inline: true
	 * },
	 * {
	 * 		name: "Another title",
	 * 		value: "Some more text",
	 * 		inline: false
	 * })
	 * ```
	 * @returns {Webcord} this
	 */
    addFields(...fields: object): this;

	/**
	 * @description Sets a title on the embed.
	 * @param {string} title The title of the embed
	 * @returns {Webcord} this
	 */
    setTitle(title: string): this;

	/**
	 * @description Sets a description on the embed.
	 * @param {string} description The description of the embed
	 * @returns {Webcord} this
	 */
    setDescription(description: string): this;

	/**
	 * @description Sets a url on the embed.
	 * @param {string} url The url of the embed
	 * @returns {Webcord} this
	 */
    setURL(url: string): this;

	/**
	 * @description Sets a timestamp on the embed.
	 * @returns {Webcord} this
	 */
    setTimestamp(): this;

	/**
	 * @description Sets a color of the embed.
	 * @param {string|number} [hex] Hex color
	 * @returns {Webcord} this
	 */
    setColor(hex: string | number): this;

    /**
	 * @description Sets the footer of the embed.
	 * @param {object} options - Footer options
	 * ```js
	 * .setFooter({
	 * 		text: "I'm a footer!",
	 * 		icon: "https://somesite.com/image.png"
	 * })
	 * ```
	 * @param {string} options.text - Footer value
	 * @param {?string} [options.icon] - Footer icon
	 * @returns {Webcord} this
	 */
    setFooter(options: Footer): this;

	/**
	 * @description Sets the image of the embed.
	 * @param {string} url - Image url
	 * @returns {Webcord} this
	 */
    setImage(url: string): this;

	/**
	 * @description Sets the thumbnail of the embed.
	 * @param {string} url - Thumbnail url
	 * @returns {Webcord} this
	 */
    setThumbnail(url: string): this;

	/**
	 * @description Sets the author of the embed.
	 * @param {object} options - Author options
	 * ```js
	 * .setAuthor({
	 * 		name: "Webcord devs",
	 * 		icon: "https://somesite.com/icon.png",
	 * 		url: "https://discord.com/"
	 * })
	 * ```
	 * @param {string} options.name - Author value
	 * @param {?string} [options.icon] - Author icon
	 * @param {?string} [options.url] - Author url
	 * @returns {Webcord} this
	 */
    setAuthor(options: Author): this;

	/**
	 * @description Sends webhook.
	 * @param {string} [msg] Optional basic message
	 * @returns {Promise.<Object>} POST request response data
	 */
    send(msg?: string): Promise<object>;
}

